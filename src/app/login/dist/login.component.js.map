{"version":3,"sources":["login.component.ts"],"names":[],"mappings":";;;;;;;;AAEA,sCAA6D;AAe7D;IAQE,wBAAoB,MAAc,EAAU,qBAA4C,EAC9E,mBAAwC;QAD9B,WAAM,GAAN,MAAM,CAAQ;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;QAC9E,wBAAmB,GAAnB,mBAAmB,CAAqB;QAP1C,kBAAa,GAAmB,EAAE,CAAC;IAOW,CAAC;IAIvD,iCAAQ,GAAR;QACE,IAAI,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,EAAE;YAC/C,IAAI,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,EAAE;gBAC/C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;aAC/C;iBAAM;gBACL,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;aACrC;SACF;IACH,CAAC;IACM,gCAAO,GAAd,UAAe,IAAU;QAAzB,iBAWC;QAVC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAClB,IAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC,UAAC,QAAQ;YACxD,IAAM,KAAK,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAChD,KAAI,CAAC,qBAAqB,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;YAC5C,KAAI,CAAC,qBAAqB,CAAC,mBAAmB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC9D,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC,CAAA;IAEP,CAAC;IAEO,8CAAqB,GAA7B,UAA8B,gBAAkC,EAAE,OAAe;QAC/E,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;SAC5D;aAAM;YACL,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,gBAAgB,EAAE,sCAAsC,CAAC,CAAC;SAC3F;IACH,CAAC;IAED,oCAAW,GAAX;QACE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,WAAW,EAAE,EAAjB,CAAiB,CAAC,CAAC;IACvD,CAAC;IA7CU,cAAc;QAL1B,gBAAS,CAAC;YACT,QAAQ,EAAE,WAAW;YACrB,WAAW,EAAE,wBAAwB;YACrC,SAAS,EAAE,CAAC,uBAAuB,CAAC;SACrC,CAAC;OACW,cAAc,CA+C1B;IAAD,qBAAC;CA/CD,AA+CC,IAAA;AA/CY,wCAAc","file":"login.component.js","sourcesContent":["import { HttpErrorResponse, HttpResponse } from \"@angular/common/http\";\nimport { Token } from \"@angular/compiler\";\nimport { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Observable, observable, Subscription } from \"rxjs\";\nimport { NotificationType } from \"../enum/notificaton-type.enum\";\nimport { CustomHttpRespone } from \"../model/custom-http-response\";\nimport { User } from \"../model/user\";\nimport { AuthenticationService } from \"../service/authentication.service\";\nimport { NotificationService } from \"../service/notification.service\";\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  showLoading: boolean | undefined;\n  private subscriptions: Subscription[] = [];\n  Observable: any;\n\n\n\n\n  constructor(private router: Router, private authenticationService: AuthenticationService,\n    private notificationService: NotificationService) { }\n\n\n\n  ngOnInit(): void {\n    if (this.authenticationService.isUserLoggedIn()) {\n      if (this.authenticationService.isUserLoggedIn()) {\n        this.router.navigateByUrl('/user/management');\n      } else {\n        this.router.navigateByUrl('/login');\n      }\n    }\n  }\n  public onLogin(user: User): void {\n    this.showLoading = true;\n    console.log(user);\n    this.subscriptions.push(\n      this.authenticationService.login(user).subscribe((response) => {\n        const token = response.headers.get('Jwt_Token');\n        this.authenticationService.saveToken(token);\n        this.authenticationService.addUserToLocalCache(response.body);\n        this.router.navigateByUrl('/user');\n      }))\n\n  }\n\n  private sendErrorNotification(notificationType: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(notificationType, 'An error occurred. Please try again.');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n}\n\n\n"]}