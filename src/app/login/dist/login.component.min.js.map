{"version":3,"sources":["login.component.ts"],"names":["core_1","require","LoginComponent","router","authenticationService","notificationService","this","subscriptions","prototype","ngOnInit","isUserLoggedIn","navigateByUrl","onLogin","user","_this","showLoading","console","log","push","login","subscribe","response","token","headers","get","saveToken","addUserToLocalCache","body","sendErrorNotification","notificationType","message","notify","ngOnDestroy","forEach","sub","unsubscribe","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAEA,IAAAA,OAAAC,QAAA,iBAeAC,eAAA,WAQE,SAAAA,EAAoBC,EAAwBC,EAClCC,GADUC,KAAAH,OAAAA,EAAwBG,KAAAF,sBAAAA,EAClCE,KAAAD,oBAAAA,EAPFC,KAAAC,cAAgC,GA6C1C,OAlCEL,EAAAM,UAAAC,SAAA,WACMH,KAAKF,sBAAsBM,mBACzBJ,KAAKF,sBAAsBM,iBAC7BJ,KAAKH,OAAOQ,cAAc,oBAE1BL,KAAKH,OAAOQ,cAAc,YAIzBT,EAAAM,UAAAI,QAAP,SAAeC,GAAf,IAAAC,EAAAR,KACEA,KAAKS,aAAc,EACnBC,QAAQC,IAAIJ,GACZP,KAAKC,cAAcW,KACjBZ,KAAKF,sBAAsBe,MAAMN,GAAMO,UAAU,SAACC,GAChD,IAAMC,EAAQD,EAASE,QAAQC,IAAI,aACnCV,EAAKV,sBAAsBqB,UAAUH,GACrCR,EAAKV,sBAAsBsB,oBAAoBL,EAASM,MACxDb,EAAKX,OAAOQ,cAAc,aAKxBT,EAAAM,UAAAoB,sBAAR,SAA8BC,EAAoCC,GAC5DA,EACFxB,KAAKD,oBAAoB0B,OAAOF,EAAkBC,GAElDxB,KAAKD,oBAAoB0B,OAAOF,EAAkB,yCAItD3B,EAAAM,UAAAwB,YAAA,WACE1B,KAAKC,cAAc0B,QAAQ,SAAAC,GAAO,OAAAA,EAAIC,iBA5C7BjC,EAAckC,WAAA,CAL1BpC,OAAAqC,UAAU,CACTC,SAAU,YACVC,YAAa,yBACbC,UAAW,CAAC,4BAEDtC,GAAb,GAAauC,QAAAvC,eAAAA","file":"login.component.min.js","sourcesContent":["import { HttpErrorResponse, HttpResponse } from \"@angular/common/http\";\nimport { Token } from \"@angular/compiler\";\nimport { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Observable, observable, Subscription } from \"rxjs\";\nimport { NotificationType } from \"../enum/notificaton-type.enum\";\nimport { CustomHttpRespone } from \"../model/custom-http-response\";\nimport { User } from \"../model/user\";\nimport { AuthenticationService } from \"../service/authentication.service\";\nimport { NotificationService } from \"../service/notification.service\";\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit, OnDestroy {\n  showLoading: boolean | undefined;\n  private subscriptions: Subscription[] = [];\n  Observable: any;\n\n\n\n\n  constructor(private router: Router, private authenticationService: AuthenticationService,\n    private notificationService: NotificationService) { }\n\n\n\n  ngOnInit(): void {\n    if (this.authenticationService.isUserLoggedIn()) {\n      if (this.authenticationService.isUserLoggedIn()) {\n        this.router.navigateByUrl('/user/management');\n      } else {\n        this.router.navigateByUrl('/login');\n      }\n    }\n  }\n  public onLogin(user: User): void {\n    this.showLoading = true;\n    console.log(user);\n    this.subscriptions.push(\n      this.authenticationService.login(user).subscribe((response) => {\n        const token = response.headers.get('Jwt_Token');\n        this.authenticationService.saveToken(token);\n        this.authenticationService.addUserToLocalCache(response.body);\n        this.router.navigateByUrl('/user');\n      }))\n\n  }\n\n  private sendErrorNotification(notificationType: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(notificationType, 'An error occurred. Please try again.');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n}\n\n\n"]}