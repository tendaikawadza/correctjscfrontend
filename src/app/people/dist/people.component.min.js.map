{"version":3,"sources":["people.component.ts"],"names":["core_1","require","forms_1","notificaton_type_enum_1","PeopleComponent","authenticationService","fb","peopleService","notificationService","this","peoplsDialog","subscriptions","submitted","roles","name","code","prototype","ngOnInit","getUsers","userForm","group","firstName","Validators","required","lastName","Username","Email","Role","Object","defineProperty","controls","onSubmit","invalid","console","log","value","register","subscribe","data","showNotification","_this","refreshing","push","response","addUsersToLocalCache","users","sendNotification","NotificationType","SUCCESS","length","errorResponse","ERROR","error","message","searchUser","onProfileImageChange","event","onSelectUser","selectedUser","_a","document","getElementById","click","onAddNewUser","notificationType","notify","openNew","changeTitle","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YACA,IAAAA,OAAAC,QAAA,iBACAC,QAAAD,QAAA,kBAIAE,wBAAAF,QAAA,iCAYAG,gBAAA,WAiBE,SAAAA,EAAoBC,EAAqDC,EAAuBC,EAAsCC,GAAlHC,KAAAJ,sBAAAA,EAAqDI,KAAAH,GAAAA,EAAuBG,KAAAF,cAAAA,EAAsCE,KAAAD,oBAAAA,EAftIC,KAAAC,cAAe,EACPD,KAAAE,cAAgC,GAOxCF,KAAAG,WAAW,EACXH,KAAAI,MAAQ,CACN,CAAEC,KAAM,WAAYC,KAAM,YAC1B,CAAED,KAAM,SAAUC,KAAM,UACxB,CAAED,KAAM,iBAAkBC,KAAM,mBAqGpC,OA/FEX,EAAAY,UAAAC,SAAA,WACER,KAAKS,UAAS,GAEdT,KAAKU,SAAWV,KAAKH,GAAGc,MAAM,CAC5BC,UAAW,CAAC,GAAI,CAACnB,QAAAoB,WAAWC,WAC5BC,SAAU,CAAC,GAAI,CAACtB,QAAAoB,WAAWC,WAC3BE,SAAU,CAAC,GAAI,CAACvB,QAAAoB,WAAWC,WAC3BG,MAAO,CAAC,GAAI,CAACxB,QAAAoB,WAAWC,WACxBI,KAAM,CAAC,GAAI,CAACzB,QAAAoB,WAAWC,cAI7BK,OAAAC,eAAIzB,EAAAY,UAAA,IAAC,KAAL,WACE,OAAOP,KAAKU,SAASW,0CAIvB1B,EAAAY,UAAAe,SAAA,WACEtB,KAAKG,WAAY,EACdH,KAAKU,SAASa,UAGjBC,QAAQC,IAAIzB,KAAKU,SAASgB,OAC1B1B,KAAKJ,sBAAsB+B,SAAS3B,KAAKU,SAASgB,OAAOE,UAAU,SAAAC,GACjEL,QAAQC,IAAII,OAIPlC,EAAAY,UAAAE,SAAP,SAAgBqB,GAAhB,IAAAC,EAAA/B,KACEA,KAAKgC,YAAa,EAClBhC,KAAKE,cAAc+B,KACjBjC,KAAKF,cAAcW,WAAWmB,UAC5B,SAACM,GACCH,EAAKjC,cAAcqC,qBAAqBD,GACxCH,EAAKK,MAAQF,EACbH,EAAKC,YAAa,EACdF,GACFC,EAAKM,iBAAiB3C,wBAAA4C,iBAAiBC,QAAYL,EAASM,OAAM,kCAGtE,SAACC,GACCV,EAAKM,iBAAiB3C,wBAAA4C,iBAAiBI,MAAOD,EAAcE,MAAMC,SAClEb,EAAKC,YAAa,MAO1BrC,EAAAY,UAAAsC,WAAA,aAEOlD,EAAAY,UAAAuC,qBAAP,SAA4BC,GAC1BvB,QAAQC,IAAIsB,IAOPpD,EAAAY,UAAAyC,aAAP,SAAoBC,SAClBjD,KAAmB,aAAIiD,EACgB,QAAvCC,EAAAC,SAASC,eAAe,uBAAe,IAAAF,GAAAA,EAAEG,SAGpC1D,EAAAY,UAAA+C,aAAP,SAAoB5C,KAgBZf,EAAAY,UAAA8B,iBAAR,SAAyBkB,EAAoCX,GACvDA,EACF5C,KAAKD,oBAAoByD,OAAOD,EAAkBX,GAElD5C,KAAKD,oBAAoByD,OAAOD,EAAkB,yCAGtD5D,EAAAY,UAAAkD,QAAA,WACEzD,KAAKC,cAAe,GAGtBN,EAAAY,UAAAmD,YAAA,aA/GW/D,EAAegE,WAAA,CAL3BpE,OAAAqE,UAAU,CACTC,SAAU,aACVC,YAAa,0BACbC,UAAW,CAAC,6BAEDpE,GAAb,GAAaqE,QAAArE,gBAAAA","file":"people.component.min.js","sourcesContent":["import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { faSlack } from '@fortawesome/free-brands-svg-icons';\n\nimport { first, Subscription } from 'rxjs';\nimport { NotificationType } from '../enum/notificaton-type.enum';\nimport { User } from '../model/user';\nimport { PeopleService } from '../people.service';\nimport { AuthenticationService } from '../service/authentication.service';\nimport { NotificationService } from '../service/notification.service';\n\n\n@Component({\n  selector: 'app-people',\n  templateUrl: './people.component.html',\n  styleUrls: ['./people.component.css']\n})\nexport class PeopleComponent implements OnInit {\n  [x: string]: any;\n  peoplsDialog = false;\n  private subscriptions: Subscription[] = [];\n  public selectedUser: User;\n  public profileImage: File;\n  userForm:FormGroup;\n  public users: User[];\n  public refreshing: boolean;\n  public Users: [];\n  submitted =false;\n  roles = [\n    { name: 'accounts', code: 'accounts' },\n    { name: 'admini', code: 'admini' },\n    { name: 'human resourse', code: 'human resourse' },\n\n];\n  constructor(private authenticationService: AuthenticationService,private fb:FormBuilder, public peopleService: PeopleService, private notificationService: NotificationService) {\n  }\n\n  ngOnInit(): void {\n    this.getUsers(true);\n   \n    this.userForm = this.fb.group({\n      firstName: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      Username: ['', [Validators.required]],\n      Email: ['', [Validators.required]],\n      Role: ['', [Validators.required]],\n  });\n  //this.productService.getAllProducts().subscribe(data => this.products = data);\n}\nget f(): any {\n  return this.userForm.controls;\n}\n\n\nonSubmit(){\n  this.submitted = true;\n  if(this.userForm.invalid){\n    return\n  }\n  console.log(this.userForm.value)\n  this.authenticationService.register(this.userForm.value).subscribe(data=>{\n    console.log(data);\n  })\n}\n\n  public getUsers(showNotification: boolean): void {\n    this.refreshing = true;\n    this.subscriptions.push(\n      this.peopleService.getUsers().subscribe(\n        (response: User[]) => {\n          this.peopleService.addUsersToLocalCache(response);\n          this.users = response;\n          this.refreshing = false;\n          if (showNotification) {\n            this.sendNotification(NotificationType.SUCCESS, `${response.length} user(s) loaded successfully.`);\n          }\n        },\n        (errorResponse: HttpErrorResponse) => {\n          this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\n          this.refreshing = false;\n        }\n      )\n    );\n\n  }\n\n  searchUser() { }\n\n  public onProfileImageChange(event: any): void {\n    console.log(event);\n\n\n\n\n  }\n\n  public onSelectUser(selectedUser: User): void {\n    this['selectedUser'] = selectedUser;\n    document.getElementById('openUserInfo')?.click();\n  }\n\n  public onAddNewUser(userForm: NgForm): void {\n\n\n\n    // const formData = this.peopleService.createUserFormDate(null, userForm.value, this.profileImage);\n    // this.subscriptions.push(\n    //   this.peopleService.addUser(formData).subscribe(\n\n    //     (Response: User) => {\n\n\n    //     },\n\n    //   ));\n  }\n\n  private sendNotification(notificationType: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(notificationType, 'An error occurred. Please try again.');\n    }\n  }\n  openNew(){\n    this.peoplsDialog = true;\n  }\n\n  changeTitle() {\n\n  }\n\n}\n"]}