{"version":3,"sources":["people.component.ts"],"names":[],"mappings":"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","file":"people.component.js","sourcesContent":["import { HttpErrorResponse, HttpResponse } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { faSlack } from '@fortawesome/free-brands-svg-icons';\n\nimport { first, Subscription } from 'rxjs';\nimport { NotificationType } from '../enum/notificaton-type.enum';\nimport { User } from '../model/user';\nimport { PeopleService } from '../people.service';\nimport { AuthenticationService } from '../service/authentication.service';\nimport { NotificationService } from '../service/notification.service';\n\n\n@Component({\n  selector: 'app-people',\n  templateUrl: './people.component.html',\n  styleUrls: ['./people.component.css']\n})\nexport class PeopleComponent implements OnInit {\n  [x: string]: any;\n  peoplsDialog = false;\n  private subscriptions: Subscription[] = [];\n  public selectedUser: User;\n  public profileImage: File;\n  userForm:FormGroup;\n  public users: User[];\n  public refreshing: boolean;\n  public Users: [];\n  submitted =false;\n  roles = [\n    { name: 'accounts', code: 'accounts' },\n    { name: 'admini', code: 'admini' },\n    { name: 'human resourse', code: 'human resourse' },\n\n];\n  constructor(private authenticationService: AuthenticationService,private fb:FormBuilder, public peopleService: PeopleService, private notificationService: NotificationService) {\n  }\n\n  ngOnInit(): void {\n    this.getUsers(true);\n   \n    this.userForm = this.fb.group({\n      firstName: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      Username: ['', [Validators.required]],\n      Email: ['', [Validators.required]],\n      Role: ['', [Validators.required]],\n  });\n  //this.productService.getAllProducts().subscribe(data => this.products = data);\n}\nget f(): any {\n  return this.userForm.controls;\n}\n\n\nonSubmit(){\n  this.submitted = true;\n  if(this.userForm.invalid){\n    return\n  }\n  console.log(this.userForm.value)\n  this.authenticationService.register(this.userForm.value).subscribe(data=>{\n    console.log(data);\n  })\n}\n\n  public getUsers(showNotification: boolean): void {\n    this.refreshing = true;\n    this.subscriptions.push(\n      this.peopleService.getUsers().subscribe(\n        (response: User[]) => {\n          this.peopleService.addUsersToLocalCache(response);\n          this.users = response;\n          this.refreshing = false;\n          if (showNotification) {\n            this.sendNotification(NotificationType.SUCCESS, `${response.length} user(s) loaded successfully.`);\n          }\n        },\n        (errorResponse: HttpErrorResponse) => {\n          this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\n          this.refreshing = false;\n        }\n      )\n    );\n\n  }\n\n  searchUser() { }\n\n  public onProfileImageChange(event: any): void {\n    console.log(event);\n\n\n\n\n  }\n\n  public onSelectUser(selectedUser: User): void {\n    this['selectedUser'] = selectedUser;\n    document.getElementById('openUserInfo')?.click();\n  }\n\n  public onAddNewUser(userForm: NgForm): void {\n\n\n\n    // const formData = this.peopleService.createUserFormDate(null, userForm.value, this.profileImage);\n    // this.subscriptions.push(\n    //   this.peopleService.addUser(formData).subscribe(\n\n    //     (Response: User) => {\n\n\n    //     },\n\n    //   ));\n  }\n\n  private sendNotification(notificationType: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(notificationType, 'An error occurred. Please try again.');\n    }\n  }\n  openNew(){\n    this.peoplsDialog = true;\n  }\n\n  changeTitle() {\n\n  }\n\n}\n"]}