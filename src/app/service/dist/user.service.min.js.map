{"version":3,"sources":["user.service.ts"],"names":["core_1","require","UserService","http","this","prototype","getUsers","get","host","addUser","formData","post","updateProfileImage","reportProgress","observe","deleteUser","userId","addUsersToLocalCache","users","localStorage","setItem","JSON","stringify","resetPassword","email","getUsersFromLocalCache","getItem","parse","createUserFormDate","loggedInUsername","user","profileImage","FormData","append","firstName","lastName","username","role","active","notLocked","__decorate","Injectable","providedIn","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBAWAC,YAAA,WAKE,SAAAA,EAAoBC,GAAAC,KAAAD,KAAAA,EAwDtB,OArDSD,EAAAG,UAAAC,SAAP,WACE,OAAOF,KAAKD,KAAKI,IAAeH,KAAKI,KAAI,eAMpCN,EAAAG,UAAAI,QAAP,SAAeC,GACb,OAAON,KAAKD,KAAKQ,KAAcP,KAAKI,KAAI,YAAaE,IAGhDR,EAAAG,UAAAO,mBAAP,SAA0BF,GACxB,OAAON,KAAKD,KAAKQ,KAAcP,KAAKI,KAAI,2BAA4BE,EACpE,CAACG,gBAAgB,EACfC,QAAS,YAINZ,EAAAG,UAAAU,WAAP,SAAkBC,GAChB,OAAOZ,KAAKD,KAAW,OAAuBC,KAAKI,KAAI,gBAAgBQ,IAGlEd,EAAAG,UAAAY,qBAAP,SAA4BC,GAC1BC,aAAaC,QAAQ,QAASC,KAAKC,UAAUJ,KAGxChB,EAAAG,UAAAkB,cAAP,SAAqBC,GACnB,OAAOpB,KAAKD,KAAKI,IAA0BH,KAAKI,KAAI,uBAAuBgB,IAItEtB,EAAAG,UAAAoB,uBAAP,WACE,OAAIN,aAAaO,QAAQ,SACdL,KAAKM,MAAMR,aAAaO,QAAQ,UAAY,SAEhD,IAGFxB,EAAAG,UAAAuB,mBAAP,SAA0BC,EAA0BC,EAAYC,GAC9D,IAAMrB,EAAW,IAAIsB,SAUrB,OATAtB,EAASuB,OAAO,kBAAmBJ,GACnCnB,EAASuB,OAAO,YAAaH,EAAKI,WAClCxB,EAASuB,OAAO,WAAYH,EAAKK,UACjCzB,EAASuB,OAAO,WAAYH,EAAKM,UACjC1B,EAASuB,OAAO,QAASH,EAAKN,OAC9Bd,EAASuB,OAAO,OAAQH,EAAKO,MAC7B3B,EAASuB,OAAO,eAAgBF,GAChCrB,EAASuB,OAAO,WAAYZ,KAAKC,UAAUQ,EAAKQ,SAChD5B,EAASuB,OAAO,cAAeZ,KAAKC,UAAUQ,EAAKS,YAC5C7B,GAzDER,EAAWsC,WAAA,CAHvBxC,OAAAyC,WAAW,CACVC,WAAY,UAEDxC,GAAb,GAAayC,QAAAzC,YAAAA","file":"user.service.min.js","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { environment } from '../../environments/environment';\nimport { HttpClient, HttpErrorResponse, HttpEvent, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable, observable } from 'rxjs';\nimport { User } from '../model/user';\nimport { CustomHttpRespone } from '../model/custom-http-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  host: any;\n  \n\n\n  constructor(private http:HttpClient) { }\n\n  \n  public getUsers(): Observable<User[] |HttpErrorResponse> {\n    return this.http.get<User[]>(`${this.host}/user/list`);\n\n  }\n \n   \n  \n  public addUser(formData: FormData): Observable<User> {\n    return this.http.post<User>(`${this.host}/user/add`, formData);\n  }\n  \n  public updateProfileImage(formData: FormData): Observable<HttpEvent<User>> {\n    return this.http.post<User>(`${this.host}/user/updateProfileImage`, formData,\n    {reportProgress: true,\n      observe: 'events'\n    });\n  }\n\n  public deleteUser(userId:number): Observable<CustomHttpRespone | HttpErrorResponse> {\n    return this.http.delete<CustomHttpRespone>(`${this.host}/user/delete/${userId}`);\n  }\n\n  public addUsersToLocalCache(users: User[]): void {\n    localStorage.setItem('users', JSON.stringify(users));\n  }\n\n  public resetPassword(email: string): Observable<CustomHttpRespone> {\n    return this.http.get<CustomHttpRespone>(`${this.host}/user/resetpassword/${email}`);\n  }\n\n\n  public getUsersFromLocalCache(): User[] {\n    if (localStorage.getItem('users')) {\n        return JSON.parse(localStorage.getItem('users') || \"false\");\n    }\n    return [];\n  }\n\n  public createUserFormDate(loggedInUsername: string, user: User, profileImage: File): FormData {\n    const formData = new FormData();\n    formData.append('currentUsername', loggedInUsername);\n    formData.append('firstName', user.firstName);\n    formData.append('lastName', user.lastName);\n    formData.append('username', user.username);\n    formData.append('email', user.email);\n    formData.append('role', user.role);\n    formData.append('profileImage', profileImage);\n    formData.append('isActive', JSON.stringify(user.active));\n    formData.append('isNonLocked', JSON.stringify(user.notLocked));\n    return formData;\n  }\n\n\n}\n"]}