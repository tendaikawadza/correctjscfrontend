{"version":3,"sources":["authentication.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA2C;AAC3C,8DAA6D;AAI7D,kDAAsD;AAKtD;IAOE,+BAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAL5B,SAAI,GAAC,yBAAW,CAAC,MAAM,CAAC;QAGvB,cAAS,GAAG,IAAI,8BAAgB,EAAE,CAAC;IAEJ,CAAC;IAGjC,qCAAK,GAAZ,UAAa,IAAU;QACrB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CACjB,IAAI,CAAC,IAAI,gBAAa,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC;IAC7D,CAAC;IAGM,wCAAQ,GAAf,UAAgB,IAAU;QACxB,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAA4B,IAAI,CAAC,IAAI,mBAAgB,EAAE,IAAI,CAAC,CAAC;IACpF,CAAC;IAES,sCAAM,GAAb;QACG,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC;QAChB,IAAI,CAAC,gBAAgB,IAAG,IAAI,CAAC;QAC7B,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAChC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACjC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAGlC,CAAC;IACM,yCAAS,GAAhB,UAAiB,KAAU;QAC1B,IAAI,CAAC,KAAK,GAAC,KAAK,CAAC;QACjB,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;QAChC,YAAY,CAAC,OAAO,CAAC,OAAO,EAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAEM,mDAAmB,GAA1B,UAA2B,IAAS;QAEnC,YAAY,CAAC,OAAO,CAAC,MAAM,EAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;IAEnD,CAAC;IAIM,qDAAqB,GAA5B;QACC,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,IAAG,OAAO,CAAC,CAAC;IAC5D,CAAC;IAEM,yCAAS,GAAhB;QACE,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC7C,CAAC;IAKM,wCAAQ,GAAf;QACE,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAGM,8CAAc,GAArB;QACO,IAAI,CAAC,SAAS,EAAE,CAAC;QACjB,IAAG,IAAI,CAAC,KAAK,IAAG,IAAI,IAAI,IAAI,CAAC,KAAK,KAAI,EAAE,EAAC;YACjC,IAAG,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,IAAG,IAAI,IAAI,EAAE,EAAC;gBAEvD,IAAG,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,EAAC;oBAC5C,IAAI,CAAC,gBAAgB,GAAC,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;oBACjE,OAAO,IAAI,CAAC;iBAGb;aAGJ;SAGR;aAEG;YAIH,IAAI,CAAC,MAAM,EAAE,CAAC;SACd;QAKD,OAAO,KAAK,CAAC;IAIpB,CAAC;IA3FM,qBAAqB;QAHjC,iBAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,qBAAqB,CAiGjC;IAAD,4BAAC;CAjGD,AAiGC,IAAA;AAjGY,sDAAqB","file":"authentication.service.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { HttpClient, HttpErrorResponse, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable, observable } from 'rxjs';\nimport { User } from '../model/user';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  public host=environment.apiUrl;\n private token: any;\n  private loggedInUsername !: string;\n  private jwtHelper = new JwtHelperService();\n\n  constructor(private http:HttpClient) { }\n\n \n  public login(user: User): Observable<HttpResponse<any> |HttpErrorResponse>{\n    return this.http.post<HttpResponse<any>|HttpErrorResponse>\n    (`${this.host}/user/login`, user, { observe: 'response' });\n  }\n\n \n  public register(user: User): Observable<User|HttpErrorResponse> {\n    return this.http.post<User|HttpErrorResponse>(`${this.host}/user/register`, user);\n  }\n  \n     public logout():void {\n        this.token=null;\n        this.loggedInUsername !=null;\n        localStorage.removeItem('user');\n        localStorage.removeItem('token');\n        localStorage.removeItem('users');\n\n\n       }\n       public saveToken(token :any):void {\n        this.token=token;\n        localStorage.removeItem('user');\n        localStorage.setItem('token',token);       \n       }\n\n       public addUserToLocalCache(user:User):void {\n       \n        localStorage.setItem('user',JSON.stringify(user));\n       \n       }\n      \n      \n      \n       public getUserFromLocalCache(): User {\n        return JSON.parse(localStorage.getItem('user')|| \"false\");\n      }\n    \n      public loadToken(): void {\n        this.token = localStorage.getItem('token');\n      }\n       \n      \n\n      \n      public getToken(): string {\n        return this.token;\n      } \n     \n       \n      public isUserLoggedIn(): boolean {\n             this.loadToken();\n             if(this.token !=null && this.token !==''){\n                     if(this.jwtHelper.decodeToken(this.token).sub !=null || ''){\n\n                         if(!this.jwtHelper.isTokenExpired(this.token)){\n                           this.loggedInUsername=this.jwtHelper.decodeToken(this.token).sub;\n                           return true;\n\n\n                         }\n\n\n                     }\n\n\n             }\n\n             else{\n\n\n\n              this.logout();\n             }\n    \n\n\n\n             return false;\n\n\n       \n      }\n  \n\n\n\n  \n}\n"]}