{"version":3,"sources":["user.service.ts"],"names":[],"mappings":";;;;;;;;AAAA,sCAA2C;AAW3C;IAKE,qBAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;IAAI,CAAC;IAGjC,8BAAQ,GAAf;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAY,IAAI,CAAC,IAAI,eAAY,CAAC,CAAC;IAEzD,CAAC;IAIM,6BAAO,GAAd,UAAe,QAAkB;QAC/B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAU,IAAI,CAAC,IAAI,cAAW,EAAE,QAAQ,CAAC,CAAC;IACjE,CAAC;IAEM,wCAAkB,GAAzB,UAA0B,QAAkB;QAC1C,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAU,IAAI,CAAC,IAAI,6BAA0B,EAAE,QAAQ,EAC5E,EAAC,cAAc,EAAE,IAAI;YACnB,OAAO,EAAE,QAAQ;SAClB,CAAC,CAAC;IACL,CAAC;IAEM,gCAAU,GAAjB,UAAkB,MAAa;QAC7B,OAAO,IAAI,CAAC,IAAI,CAAC,QAAM,CAAA,CAAuB,IAAI,CAAC,IAAI,qBAAgB,MAAQ,CAAC,CAAC;IACnF,CAAC;IAEM,0CAAoB,GAA3B,UAA4B,KAAa;QACvC,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACvD,CAAC;IAEM,mCAAa,GAApB,UAAqB,KAAa;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAuB,IAAI,CAAC,IAAI,4BAAuB,KAAO,CAAC,CAAC;IACtF,CAAC;IAGM,4CAAsB,GAA7B;QACE,IAAI,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YAC/B,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,CAAC;SAC/D;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAEM,wCAAkB,GAAzB,UAA0B,gBAAwB,EAAE,IAAU,EAAE,YAAkB;QAChF,IAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAC;QAChC,QAAQ,CAAC,MAAM,CAAC,iBAAiB,EAAE,gBAAgB,CAAC,CAAC;QACrD,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC7C,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3C,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC3C,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACrC,QAAQ,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;QACnC,QAAQ,CAAC,MAAM,CAAC,cAAc,EAAE,YAAY,CAAC,CAAC;QAC9C,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;QACzD,QAAQ,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;QAC/D,OAAO,QAAQ,CAAC;IAClB,CAAC;IA1DU,WAAW;QAHvB,iBAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,WAAW,CA6DvB;IAAD,kBAAC;CA7DD,AA6DC,IAAA;AA7DY,kCAAW","file":"user.service.js","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { environment } from '../../environments/environment';\nimport { HttpClient, HttpErrorResponse, HttpEvent, HttpRequest, HttpResponse } from '@angular/common/http';\nimport { Observable, observable } from 'rxjs';\nimport { User } from '../model/user';\nimport { CustomHttpRespone } from '../model/custom-http-response';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  host: any;\n  \n\n\n  constructor(private http:HttpClient) { }\n\n  \n  public getUsers(): Observable<User[] |HttpErrorResponse> {\n    return this.http.get<User[]>(`${this.host}/user/list`);\n\n  }\n \n   \n  \n  public addUser(formData: FormData): Observable<User> {\n    return this.http.post<User>(`${this.host}/user/add`, formData);\n  }\n  \n  public updateProfileImage(formData: FormData): Observable<HttpEvent<User>> {\n    return this.http.post<User>(`${this.host}/user/updateProfileImage`, formData,\n    {reportProgress: true,\n      observe: 'events'\n    });\n  }\n\n  public deleteUser(userId:number): Observable<CustomHttpRespone | HttpErrorResponse> {\n    return this.http.delete<CustomHttpRespone>(`${this.host}/user/delete/${userId}`);\n  }\n\n  public addUsersToLocalCache(users: User[]): void {\n    localStorage.setItem('users', JSON.stringify(users));\n  }\n\n  public resetPassword(email: string): Observable<CustomHttpRespone> {\n    return this.http.get<CustomHttpRespone>(`${this.host}/user/resetpassword/${email}`);\n  }\n\n\n  public getUsersFromLocalCache(): User[] {\n    if (localStorage.getItem('users')) {\n        return JSON.parse(localStorage.getItem('users') || \"false\");\n    }\n    return [];\n  }\n\n  public createUserFormDate(loggedInUsername: string, user: User, profileImage: File): FormData {\n    const formData = new FormData();\n    formData.append('currentUsername', loggedInUsername);\n    formData.append('firstName', user.firstName);\n    formData.append('lastName', user.lastName);\n    formData.append('username', user.username);\n    formData.append('email', user.email);\n    formData.append('role', user.role);\n    formData.append('profileImage', profileImage);\n    formData.append('isActive', JSON.stringify(user.active));\n    formData.append('isNonLocked', JSON.stringify(user.notLocked));\n    return formData;\n  }\n\n\n}\n"]}