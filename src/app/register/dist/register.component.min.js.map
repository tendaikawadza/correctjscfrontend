{"version":3,"sources":["register.component.ts"],"names":["core_1","require","notificaton_type_enum_1","RegisterComponent","router","authenticationService","notificationService","this","subscriptions","prototype","ngOnInit","isUserLoggedIn","navigateByUrl","onRegister","user","_this","showLoading","push","register","subscribe","next","response","sendNotification","NotificationType","SUCCESS","firstName","error","errorResponse","ERROR","message","notificationType","notify","ngOnDestroy","forEach","sub","unsubscribe","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAGA,IAAAA,OAAAC,QAAA,iBAGAC,wBAAAD,QAAA,iCAYAE,kBAAA,WAKE,SAAAA,EAAoBC,EAAwBC,EACxBC,GADAC,KAAAH,OAAAA,EAAwBG,KAAAF,sBAAAA,EACxBE,KAAAD,oBAAAA,EAHZC,KAAAC,cAAgC,GAwC1C,OAnCEL,EAAAM,UAAAC,SAAA,WACMH,KAAKF,sBAAsBM,kBAC7BJ,KAAKH,OAAOQ,cAAc,UAIvBT,EAAAM,UAAAI,WAAP,SAAkBC,GAAlB,IAAAC,EAAAR,KACEA,KAAKS,aAAc,EACnBT,KAAKC,cAAcS,KACjBV,KAAKF,sBAAsBa,SAASJ,GAAMK,UAAU,CAClDC,KAAM,SAACC,GACLN,EAAKC,aAAc,EACnBD,EAAKO,iBAAiBpB,wBAAAqB,iBAAiBC,QAAS,iCAAiCH,EAASI,UAAS,iEAGrGC,MAAO,SAACC,GACNZ,EAAKO,iBAAiBpB,wBAAAqB,iBAAiBK,MAAOD,EAAcD,MAAMG,SAClEd,EAAKC,aAAc,OAMnBb,EAAAM,UAAAa,iBAAR,SAAyBQ,EAAoCD,GACvDA,EACFtB,KAAKD,oBAAoByB,OAAOD,EAAkBD,GAElDtB,KAAKD,oBAAoByB,OAAOD,EAAkB,yCAItD3B,EAAAM,UAAAuB,YAAA,WACEzB,KAAKC,cAAcyB,QAAQ,SAAAC,GAAO,OAAAA,EAAIC,iBAxC7BhC,EAAiBiC,WAAA,CAL7BpC,OAAAqC,UAAU,CACTC,SAAU,eACVC,YAAa,4BACbC,UAAW,CAAC,+BAEDrC,GAAb,GAAasC,QAAAtC,kBAAAA","file":"register.component.min.js","sourcesContent":["\nimport { HttpErrorResponse, HttpResponse } from \"@angular/common/http\";\nimport { Token } from \"@angular/compiler\";\nimport { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Observable, observable, Subscription } from \"rxjs\";\nimport { NotificationType } from \"../enum/notificaton-type.enum\";\nimport { CustomHttpRespone } from \"../model/custom-http-response\";\nimport { User } from \"../model/user\";\nimport { AuthenticationService } from \"../service/authentication.service\";\nimport { NotificationService } from \"../service/notification.service\";\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n\n  public showLoading: boolean | any;\n  private subscriptions: Subscription[] = [];\n\n  constructor(private router: Router, private authenticationService: AuthenticationService,\n              private notificationService: NotificationService) {}\n\n  ngOnInit(): void {\n    if (this.authenticationService.isUserLoggedIn()) {\n      this.router.navigateByUrl('/user');\n    }\n  }\n\n  public onRegister(user: User): void {\n    this.showLoading = true;\n    this.subscriptions.push(\n      this.authenticationService.register(user).subscribe({\n        next: (response: User) => {\n          this.showLoading = false;\n          this.sendNotification(NotificationType.SUCCESS, `A new account was created for ${response.firstName}.\n          Please check your email for password to log in.`);\n                  },\n        error: (errorResponse: HttpErrorResponse) => {\n          this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\n          this.showLoading = false;\n        }\n      })\n    );\n  }\n\n  private sendNotification(notificationType: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(notificationType, 'An error occurred. Please try again.');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n}\n"]}