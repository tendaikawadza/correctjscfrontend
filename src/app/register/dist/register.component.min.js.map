{"version":3,"sources":["register.component.ts"],"names":["core_1","require","forms_1","notificaton_type_enum_1","RegisterComponent","formBuld","router","authenticationService","notificationService","this","subscriptions","prototype","ngOnInit","isUserLoggedIn","navigateByUrl","regForm","group","firstName","Validators","required","lastName","username","email","department","onRegister","_this","invalid","console","log","value","showLoading","push","register","subscribe","next","response","sendNotification","NotificationType","SUCCESS","error","errorResponse","ERROR","message","notificationType","notify","ngOnDestroy","forEach","sub","unsubscribe","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAGA,IAAAA,OAAAC,QAAA,iBACAC,QAAAD,QAAA,kBAGAE,wBAAAF,QAAA,iCAYAG,kBAAA,WAKE,SAAAA,EAAoBC,EAA6BC,EAAwBC,EACrDC,GADAC,KAAAJ,SAAAA,EAA6BI,KAAAH,OAAAA,EAAwBG,KAAAF,sBAAAA,EACrDE,KAAAD,oBAAAA,EAHZC,KAAAC,cAAgC,GAoD1C,OA/CEN,EAAAO,UAAAC,SAAA,WACMH,KAAKF,sBAAsBM,kBAC7BJ,KAAKH,OAAOQ,cAAc,SAE5BL,KAAKM,QAAQN,KAAKJ,SAASW,MAAM,CAC/BC,UAAU,CAAC,GAAIf,QAAAgB,WAAWC,UAC1BC,SAAS,CAAC,GAAIlB,QAAAgB,WAAWC,UACzBE,SAAS,CAAC,GAAInB,QAAAgB,WAAWC,UACzBG,MAAM,CAAC,GAAIpB,QAAAgB,WAAWC,UACtBI,WAAW,CAAC,GAAIrB,QAAAgB,WAAWC,aAIxBf,EAAAO,UAAAa,WAAP,WAAA,IAAAC,EAAAhB,KACKA,KAAKM,QAAQW,UAGhBC,QAAQC,IAAInB,KAAKM,QAAQc,OAEzBpB,KAAKqB,aAAc,EACnBrB,KAAKC,cAAcqB,KACjBtB,KAAKF,sBAAsByB,SAASvB,KAAKM,QAAQc,OAAOI,UAAU,CAChEC,KAAM,SAACC,GACLV,EAAKK,aAAc,EACnBL,EAAKW,iBAAiBjC,wBAAAkC,iBAAiBC,QAAS,iCAAiCH,EAASlB,UAAS,iEAGrGsB,MAAO,SAACC,GACNf,EAAKW,iBAAiBjC,wBAAAkC,iBAAiBI,MAAOD,EAAcD,MAAMG,SAClEjB,EAAKK,aAAc,QAMnB1B,EAAAO,UAAAyB,iBAAR,SAAyBO,EAAoCD,GACvDA,EACFjC,KAAKD,oBAAoBoC,OAAOD,EAAkBD,GAElDjC,KAAKD,oBAAoBoC,OAAOD,EAAkB,yCAItDvC,EAAAO,UAAAkC,YAAA,WACEpC,KAAKC,cAAcoC,QAAQ,SAAAC,GAAO,OAAAA,EAAIC,iBApD7B5C,EAAiB6C,WAAA,CAL7BjD,OAAAkD,UAAU,CACTC,SAAU,eACVC,YAAa,4BACbC,UAAW,CAAC,+BAEDjD,GAAb,GAAakD,QAAAlD,kBAAAA","file":"register.component.min.js","sourcesContent":["\nimport { HttpErrorResponse, HttpResponse } from \"@angular/common/http\";\nimport { Token } from \"@angular/compiler\";\nimport { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\nimport { Router } from \"@angular/router\";\nimport { Observable, observable, Subscription } from \"rxjs\";\nimport { NotificationType } from \"../enum/notificaton-type.enum\";\nimport { CustomHttpRespone } from \"../model/custom-http-response\";\nimport { User } from \"../model/user\";\nimport { AuthenticationService } from \"../service/authentication.service\";\nimport { NotificationService } from \"../service/notification.service\";\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  regForm:FormGroup;\n  public showLoading: boolean | any;\n  private subscriptions: Subscription[] = [];\n\n  constructor(private formBuld:FormBuilder,private router: Router, private authenticationService: AuthenticationService,\n              private notificationService: NotificationService) {}\n\n  ngOnInit(): void {\n    if (this.authenticationService.isUserLoggedIn()) {\n      this.router.navigateByUrl('/user');\n    }\n    this.regForm=this.formBuld.group({\n      firstName:['', Validators.required],\n      lastName:['', Validators.required],\n      username:['', Validators.required],\n      email:['', Validators.required],\n      department:['', Validators.required]      \n    })\n  }\n\n  public onRegister(): void {\n    if(this.regForm.invalid){\n      return\n    }\n    console.log(this.regForm.value)\n  \n    this.showLoading = true;\n    this.subscriptions.push(\n      this.authenticationService.register(this.regForm.value).subscribe({\n        next: (response: HttpResponse<User> | any) => {\n          this.showLoading = false;\n          this.sendNotification(NotificationType.SUCCESS, `A new account was created for ${response.firstName}.\n          Please check your email for password to log in.`);\n                  },\n        error: (errorResponse: HttpErrorResponse) => {\n          this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\n          this.showLoading = false;\n        }\n      })\n    );\n  }\n\n  private sendNotification(notificationType: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(notificationType, 'An error occurred. Please try again.');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n}\n"]}