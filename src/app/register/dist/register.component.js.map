{"version":3,"sources":["register.component.ts"],"names":[],"mappings":";;;;;;;;AAGA,sCAA6D;AAG7D,uEAAiE;AAYjE;IAKE,2BAAoB,MAAc,EAAU,qBAA4C,EACpE,mBAAwC;QADxC,WAAM,GAAN,MAAM,CAAQ;QAAU,0BAAqB,GAArB,qBAAqB,CAAuB;QACpE,wBAAmB,GAAnB,mBAAmB,CAAqB;QAHpD,kBAAa,GAAmB,EAAE,CAAC;IAGoB,CAAC;IAEhE,oCAAQ,GAAR;QACE,IAAI,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,EAAE;YAC/C,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;SACpC;IACH,CAAC;IAEM,sCAAU,GAAjB,UAAkB,IAAU;QAA5B,iBAeC;QAdC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QACxB,IAAI,CAAC,aAAa,CAAC,IAAI,CACrB,IAAI,CAAC,qBAAqB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,SAAS,CAAC;YAClD,IAAI,EAAE,UAAC,QAAkC;gBACvC,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;gBACzB,KAAI,CAAC,gBAAgB,CAAC,wCAAgB,CAAC,OAAO,EAAE,mCAAiC,QAAQ,CAAC,SAAS,iEACnD,CAAC,CAAC;YAC1C,CAAC;YACX,KAAK,EAAE,UAAC,aAAgC;gBACtC,KAAI,CAAC,gBAAgB,CAAC,wCAAgB,CAAC,KAAK,EAAE,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC3E,KAAI,CAAC,WAAW,GAAG,KAAK,CAAC;YAC3B,CAAC;SACF,CAAC,CACH,CAAC;IACJ,CAAC;IAEO,4CAAgB,GAAxB,UAAyB,gBAAkC,EAAE,OAAe;QAC1E,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;SAC5D;aAAM;YACL,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,gBAAgB,EAAE,sCAAsC,CAAC,CAAC;SAC3F;IACH,CAAC;IAED,uCAAW,GAAX;QACE,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,WAAW,EAAE,EAAjB,CAAiB,CAAC,CAAC;IACvD,CAAC;IAzCU,iBAAiB;QAL7B,gBAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,WAAW,EAAE,2BAA2B;YACxC,SAAS,EAAE,CAAC,0BAA0B,CAAC;SACxC,CAAC;OACW,iBAAiB,CA2C7B;IAAD,wBAAC;CA3CD,AA2CC,IAAA;AA3CY,8CAAiB","file":"register.component.js","sourcesContent":["\nimport { HttpErrorResponse, HttpResponse } from \"@angular/common/http\";\nimport { Token } from \"@angular/compiler\";\nimport { Component, OnDestroy, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { Observable, observable, Subscription } from \"rxjs\";\nimport { NotificationType } from \"../enum/notificaton-type.enum\";\nimport { CustomHttpRespone } from \"../model/custom-http-response\";\nimport { User } from \"../model/user\";\nimport { AuthenticationService } from \"../service/authentication.service\";\nimport { NotificationService } from \"../service/notification.service\";\n\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n\n  public showLoading: boolean | any;\n  private subscriptions: Subscription[] = [];\n\n  constructor(private router: Router, private authenticationService: AuthenticationService,\n              private notificationService: NotificationService) {}\n\n  ngOnInit(): void {\n    if (this.authenticationService.isUserLoggedIn()) {\n      this.router.navigateByUrl('/user');\n    }\n  }\n\n  public onRegister(user: User): void {\n    this.showLoading = true;\n    this.subscriptions.push(\n      this.authenticationService.register(user).subscribe({\n        next: (response: HttpResponse<User> | any) => {\n          this.showLoading = false;\n          this.sendNotification(NotificationType.SUCCESS, `A new account was created for ${response.firstName}.\n          Please check your email for password to log in.`);\n                  },\n        error: (errorResponse: HttpErrorResponse) => {\n          this.sendNotification(NotificationType.ERROR, errorResponse.error.message);\n          this.showLoading = false;\n        }\n      })\n    );\n  }\n\n  private sendNotification(notificationType: NotificationType, message: string): void {\n    if (message) {\n      this.notificationService.notify(notificationType, message);\n    } else {\n      this.notificationService.notify(notificationType, 'An error occurred. Please try again.');\n    }\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.forEach(sub => sub.unsubscribe());\n  }\n\n}\n"]}